{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","assets/threed/solarsystem/Solarsystem.js","assets/threed/flame/Flame.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","React","Component","Flame","id","ref","mount","canvas","this","renderer","THREE","antialias","outputEncoding","scene","background","setHSL","fog","camera","window","innerWidth","innerHeight","position","set","up","lookAt","flamepivot","add","textureLoader","textureFlare0","load","textureFlare3","h","s","l","light","color","lensflare","Lensflare","console","log","addElement","LensflareElement","addLight","butterflyMain","z","butterflyPivot","sphereGeometry","sunMaterial","emissive","side","leftwingpivot","sunMesh","x","rotation","Math","PI","rightwingpivot","rightwingMesh","sg","rightwingMeshdown","y","leftwingMeshdown","targetPosition","cnt","tianwei","mouse","addEventListener","event","preventDefault","clientX","clientY","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","copy","requestAnimationFrame","render","time","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","getWorldPosition","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23cb3b3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport './Solarsystem.css';\r\nimport {GUI} from \"dat.gui\"\r\n\r\nexport default class Solarsystem extends React.Component{\r\n    /**\r\n     * @ props.title\r\n     * @ props.picture\r\n     * @ props.description\r\n     * \r\n     * return a react component of game card IN 3D\r\n     */\r\n\r\n    //rr = React.createRef();\r\n    render() {\r\n        return(\r\n            // <div ref={this.rr} />\r\n            <canvas id = \"Solarsystem-c\" ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // hook the renderer to the canvas\r\n        const canvas = this.mount\r\n        const renderer = new THREE.WebGLRenderer({canvas});\r\n\r\n        const fov = 40;\r\n        const aspect = 2;  // the canvas default\r\n        const near = 0.1;\r\n        const far = 1000;\r\n        const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n        camera.position.set(0, 50, 0);\r\n        camera.up.set(0, 0, 1);\r\n        camera.lookAt(0, 0, 0);\r\n      \r\n        const scene = new THREE.Scene();\r\n      \r\n        {\r\n          const color = 0xFFFFFF;\r\n          const intensity = 3;\r\n          const light = new THREE.PointLight(color, intensity);\r\n          scene.add(light);\r\n        }\r\n      \r\n        // an array of objects who's rotation to update\r\n        const objects = [];\r\n      \r\n        const radius = 1;\r\n        const widthSegments = 6;\r\n        const heightSegments = 6;\r\n        const sphereGeometry = new THREE.SphereGeometry(\r\n            radius, widthSegments, heightSegments);\r\n\r\n        const solarSystem = new THREE.Object3D();\r\n        scene.add(solarSystem);\r\n        objects.push(solarSystem);\r\n      \r\n        const sunMaterial = new THREE.MeshPhongMaterial({emissive: 0xFFFF00});\r\n        const sunMesh = new THREE.Mesh(sphereGeometry, sunMaterial);\r\n        sunMesh.scale.set(5, 5, 5);\r\n        solarSystem.add(sunMesh);\r\n        objects.push(sunMesh);\r\n\r\n        const earthOrbit = new THREE.Object3D();\r\n        earthOrbit.position.x = 10;\r\n        solarSystem.add(earthOrbit);\r\n        objects.push(earthOrbit);\r\n\r\n        const earthMaterial = new THREE.MeshPhongMaterial({color: 0x2233FF, emissive: 0x112244});\r\n        const earthMesh = new THREE.Mesh(sphereGeometry, earthMaterial);\r\n        earthOrbit.add(earthMesh);\r\n        objects.push(earthMesh);\r\n\r\n        const moonOrbit = new THREE.Object3D();\r\n        moonOrbit.position.x = 2;\r\n        earthOrbit.add(moonOrbit);\r\n        \r\n        const moonMaterial = new THREE.MeshPhongMaterial({color: 0x888888, emissive: 0x222222});\r\n        const moonMesh = new THREE.Mesh(sphereGeometry, moonMaterial);\r\n        moonMesh.scale.set(.5, .5, .5);\r\n        moonOrbit.add(moonMesh);\r\n        objects.push(moonMesh);\r\n          \r\n        class AxisGridHelper {\r\n          constructor(node, units = 10) {\r\n            const axes = new THREE.AxesHelper();\r\n            axes.material.depthTest = false;\r\n            axes.renderOrder = 2;  // after the grid\r\n            node.add(axes);\r\n         \r\n            const grid = new THREE.GridHelper(units, units);\r\n            grid.material.depthTest = false;\r\n            grid.renderOrder = 1;\r\n            node.add(grid);\r\n         \r\n            this.grid = grid;\r\n            this.axes = axes;\r\n            this.visible = false;\r\n          }\r\n          get visible() {\r\n            return this._visible;\r\n          }\r\n          set visible(v) {\r\n            this._visible = v;\r\n            this.grid.visible = v;\r\n            this.axes.visible = v;\r\n          }\r\n        }\r\n        const gui = new GUI();\r\n        function makeAxisGrid(node, label, units) {\r\n          const helper = new AxisGridHelper(node, units);\r\n          gui.add(helper, 'visible').name(label);\r\n        }\r\n      \r\n        makeAxisGrid(solarSystem, 'solarSystem', 26);\r\n        makeAxisGrid(sunMesh, 'sunMesh');\r\n        makeAxisGrid(earthOrbit, 'earthOrbit');\r\n        makeAxisGrid(earthMesh, 'earthMesh');\r\n        makeAxisGrid(moonOrbit, 'moonOrbit');\r\n        makeAxisGrid(moonMesh, 'moonMesh');\r\n\r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n      \r\n        function render(time) {\r\n          time *= 0.001;\r\n      \r\n          if (resizeRendererToDisplaySize(renderer)) {\r\n            const canvas = renderer.domElement;\r\n            camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n          }\r\n      \r\n          objects.forEach((obj) => {\r\n            obj.rotation.y = time;\r\n          });\r\n      \r\n          renderer.render(scene, camera);\r\n      \r\n          requestAnimationFrame(render);\r\n        }\r\n      \r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport './Flame.css';\r\nimport { FlyControls } from '../../../../node_modules/three/examples/jsm/controls/FlyControls.js';\r\nimport { Lensflare, LensflareElement } from '../../../../node_modules/three/examples/jsm/objects/Lensflare.js';\r\n\r\nexport default class Flame extends React.Component{\r\n    /**\r\n     * @ props.title\r\n     * @ props.picture\r\n     * @ props.description\r\n     * \r\n     * return a react component of game card IN 3D\r\n     */\r\n\r\n    //rr = React.createRef();\r\n    render() {\r\n        return(\r\n            // <div ref={this.rr} />\r\n            <canvas id = \"Flame-c\" ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n    componentDidMount() {\r\n      // renderer, scene, and camera\r\n        // hook the renderer to the canvas\r\n        const canvas = this.mount\r\n        const renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n          canvas: canvas});\r\n        renderer.outputEncoding = THREE.sRGBEncoding;\r\n            \r\n        \r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color().setHSL( 0.51, 0.4, 0.01 );\r\n        scene.fog = new THREE.Fog( scene.background, 3500, 15000 );\r\n\r\n        var camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 15000 );\r\n        camera.position.set(0, 0, 250);\r\n        camera.up.set(0, 0, 1);\r\n        camera.lookAt(0, 0, 0);\r\n\r\n\r\n        // the target flame\r\n        const flamepivot = new THREE.Object3D();\r\n        scene.add(flamepivot);\r\n        // lensflares\r\n\t\t\t\tconst textureLoader = new THREE.TextureLoader();\r\n\t\t\t\tconst textureFlare0 = textureLoader.load( 'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/lensflare/lensflare0.png' );\r\n\t\t\t\tconst textureFlare3 = textureLoader.load( 'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/lensflare/lensflare3.png' );\r\n\t\t\t\taddLight( 0.55, 0.9, 0.5);\r\n\t\t\t\tfunction addLight( h, s, l) {\r\n\t\t\t\t\tconst light = new THREE.PointLight( 0xffffff, 1.5, 2000 );\r\n\t\t\t\t\tlight.color.setHSL( h, s, l );\r\n\t\t\t\t\t// light.position.set( x, y, z );\r\n\t\t\t\t\tflamepivot.add( light );\r\n\r\n\t\t\t\t\tconst lensflare = new Lensflare();\r\n          console.log(\"ccc\", lensflare)\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n\t\t\t\t\tlight.add( lensflare );\r\n\t\t\t\t}\r\n\r\n        //the butterfly\r\n        const butterflyMain = new THREE.Object3D();\r\n        butterflyMain.position.z = 20\r\n        scene.add(butterflyMain);\r\n\r\n        const butterflyPivot = new THREE.Object3D();\r\n        butterflyMain.add(butterflyPivot);\r\n\r\n        const sphereGeometry = new THREE.CircleGeometry(10, 5);\r\n        const sunMaterial = new THREE.MeshPhongMaterial({emissive: 0xFFFF00, side: THREE.DoubleSide,});\r\n        \r\n        const leftwingpivot = new THREE.Object3D();\r\n        butterflyPivot.add(leftwingpivot)\r\n        const sunMesh = new THREE.Mesh(sphereGeometry, sunMaterial);\r\n        sunMesh.position.x = 10\r\n        leftwingpivot.rotation.set(Math.PI / 2, 0, 0);\r\n        leftwingpivot.add(sunMesh);\r\n\r\n        \r\n\r\n        const rightwingpivot = new THREE.Object3D();\r\n        butterflyPivot.add(rightwingpivot)\r\n\r\n        const rightwingMesh = new THREE.Mesh(sphereGeometry, sunMaterial);\r\n        rightwingMesh.position.x = 10\r\n        rightwingpivot.rotation.set(Math.PI / 2, 0, 0);\r\n        \r\n        rightwingpivot.add(rightwingMesh);\r\n\r\n        const sg = new THREE.CircleGeometry(5, 5);\r\n        const rightwingMeshdown = new THREE.Mesh(sg, sunMaterial);\r\n        rightwingMeshdown.position.x = 6\r\n        rightwingMeshdown.position.y = -10\r\n        const leftwingMeshdown = new THREE.Mesh(sg, sunMaterial);\r\n        leftwingMeshdown.position.x = 6\r\n        leftwingMeshdown.position.y = -10\r\n        \r\n        rightwingpivot.add(rightwingMeshdown);\r\n        leftwingpivot.add(leftwingMeshdown);\r\n \r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n        \r\n      \r\n        const targetPosition = new THREE.Vector3();\r\n        var cnt = 0\r\n        var tianwei = true\r\n        var inc = 0.05\r\n        function render(time) {\r\n      \r\n          if (resizeRendererToDisplaySize(renderer)) {\r\n            const canvas = renderer.domElement;\r\n            camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n          }\r\n\r\n          flamepivot.getWorldPosition(targetPosition);\r\n\r\n          butterflyMain.lookAt(targetPosition);\r\n          console.log(butterflyPivot.position.x, targetPosition.x)\r\n\r\n          // go to the target position\r\n          {\r\n            butterflyMain.position.x += (flamepivot.position.x + 13 - butterflyMain.position.x) / 60\r\n            butterflyMain.position.y += (flamepivot.position.y + 13 - butterflyMain.position.y) / 60\r\n          }\r\n\r\n          if(tianwei){\r\n            cnt += inc\r\n            \r\n          }else{\r\n            cnt -= inc\r\n          }\r\n          //  rightwingMesh.rotation.set(Math.PI / 2, cnt, 0);\r\n          // rightwingMesh.setRotationFromAxisAngle(butterflyPivot.y,cnt)\r\n          leftwingpivot.rotation.set(Math.PI / 2, -cnt, 0);\r\n          rightwingpivot.rotation.set(Math.PI / 2, cnt, 0);\r\n          if(cnt >= 1)\r\n            tianwei = false\r\n          if(cnt <= 0)\r\n            tianwei = true\r\n\r\n          renderer.render(scene, camera);\r\n      \r\n          requestAnimationFrame(render);\r\n        }\r\n        \r\n        var mouse = {x: 0, y: 0};\r\n        canvas.addEventListener('mousemove', function (event) {\r\n          event.preventDefault();\r\n          // console.log(event.clientX, event.clientY)\r\n          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n          mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n          \r\n          // Make the sphere follow the mouse\r\n            var vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n            vector.unproject( camera );\r\n            var dir = vector.sub( camera.position ).normalize();\r\n            var distance = - camera.position.z / dir.z;\r\n            var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n            flamepivot.position.copy(pos);\r\n        });\r\n\r\n        \r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Solarsystem from './assets/threed/solarsystem/Solarsystem';\nimport Flame from './assets/threed/flame/Flame';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <StringAnimation strings = {[\"yoloswag4jesus\",\"I am Sexy\", \"and I know it\"]}/> */}\n    {/* <LandingScene /> */}\n    <Flame/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}