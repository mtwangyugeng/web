{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","assets/threed/solarsystem/Solarsystem.js","assets/threed/flame/Flame.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","React","Component","Flame","id","ref","mount","canvas","this","renderer","THREE","antialias","outputEncoding","scene","background","setHSL","fog","camera","window","innerWidth","innerHeight","position","set","up","lookAt","solarSystem","add","push","textureLoader","textureFlare0","load","textureFlare3","h","s","l","x","y","z","light","color","lensflare","Lensflare","console","log","addElement","LensflareElement","addLight","butterflyPivot","sphereGeometry","sunMaterial","emissive","sunMesh","targetPosition","mouse","addEventListener","event","preventDefault","clientX","clientY","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","copy","requestAnimationFrame","render","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","getWorldPosition","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.607ae466.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport './Solarsystem.css';\r\nimport {GUI} from \"dat.gui\"\r\n\r\nexport default class Solarsystem extends React.Component{\r\n    /**\r\n     * @ props.title\r\n     * @ props.picture\r\n     * @ props.description\r\n     * \r\n     * return a react component of game card IN 3D\r\n     */\r\n\r\n    //rr = React.createRef();\r\n    render() {\r\n        return(\r\n            // <div ref={this.rr} />\r\n            <canvas id = \"Solarsystem-c\" ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // hook the renderer to the canvas\r\n        const canvas = this.mount\r\n        const renderer = new THREE.WebGLRenderer({canvas});\r\n\r\n        const fov = 40;\r\n        const aspect = 2;  // the canvas default\r\n        const near = 0.1;\r\n        const far = 1000;\r\n        const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n        camera.position.set(0, 50, 0);\r\n        camera.up.set(0, 0, 1);\r\n        camera.lookAt(0, 0, 0);\r\n      \r\n        const scene = new THREE.Scene();\r\n      \r\n        {\r\n          const color = 0xFFFFFF;\r\n          const intensity = 3;\r\n          const light = new THREE.PointLight(color, intensity);\r\n          scene.add(light);\r\n        }\r\n      \r\n        // an array of objects who's rotation to update\r\n        const objects = [];\r\n      \r\n        const radius = 1;\r\n        const widthSegments = 6;\r\n        const heightSegments = 6;\r\n        const sphereGeometry = new THREE.SphereGeometry(\r\n            radius, widthSegments, heightSegments);\r\n\r\n        const solarSystem = new THREE.Object3D();\r\n        scene.add(solarSystem);\r\n        objects.push(solarSystem);\r\n      \r\n        const sunMaterial = new THREE.MeshPhongMaterial({emissive: 0xFFFF00});\r\n        const sunMesh = new THREE.Mesh(sphereGeometry, sunMaterial);\r\n        sunMesh.scale.set(5, 5, 5);\r\n        solarSystem.add(sunMesh);\r\n        objects.push(sunMesh);\r\n\r\n        const earthOrbit = new THREE.Object3D();\r\n        earthOrbit.position.x = 10;\r\n        solarSystem.add(earthOrbit);\r\n        objects.push(earthOrbit);\r\n\r\n        const earthMaterial = new THREE.MeshPhongMaterial({color: 0x2233FF, emissive: 0x112244});\r\n        const earthMesh = new THREE.Mesh(sphereGeometry, earthMaterial);\r\n        earthOrbit.add(earthMesh);\r\n        objects.push(earthMesh);\r\n\r\n        const moonOrbit = new THREE.Object3D();\r\n        moonOrbit.position.x = 2;\r\n        earthOrbit.add(moonOrbit);\r\n        \r\n        const moonMaterial = new THREE.MeshPhongMaterial({color: 0x888888, emissive: 0x222222});\r\n        const moonMesh = new THREE.Mesh(sphereGeometry, moonMaterial);\r\n        moonMesh.scale.set(.5, .5, .5);\r\n        moonOrbit.add(moonMesh);\r\n        objects.push(moonMesh);\r\n          \r\n        class AxisGridHelper {\r\n          constructor(node, units = 10) {\r\n            const axes = new THREE.AxesHelper();\r\n            axes.material.depthTest = false;\r\n            axes.renderOrder = 2;  // after the grid\r\n            node.add(axes);\r\n         \r\n            const grid = new THREE.GridHelper(units, units);\r\n            grid.material.depthTest = false;\r\n            grid.renderOrder = 1;\r\n            node.add(grid);\r\n         \r\n            this.grid = grid;\r\n            this.axes = axes;\r\n            this.visible = false;\r\n          }\r\n          get visible() {\r\n            return this._visible;\r\n          }\r\n          set visible(v) {\r\n            this._visible = v;\r\n            this.grid.visible = v;\r\n            this.axes.visible = v;\r\n          }\r\n        }\r\n        const gui = new GUI();\r\n        function makeAxisGrid(node, label, units) {\r\n          const helper = new AxisGridHelper(node, units);\r\n          gui.add(helper, 'visible').name(label);\r\n        }\r\n      \r\n        makeAxisGrid(solarSystem, 'solarSystem', 26);\r\n        makeAxisGrid(sunMesh, 'sunMesh');\r\n        makeAxisGrid(earthOrbit, 'earthOrbit');\r\n        makeAxisGrid(earthMesh, 'earthMesh');\r\n        makeAxisGrid(moonOrbit, 'moonOrbit');\r\n        makeAxisGrid(moonMesh, 'moonMesh');\r\n\r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n      \r\n        function render(time) {\r\n          time *= 0.001;\r\n      \r\n          if (resizeRendererToDisplaySize(renderer)) {\r\n            const canvas = renderer.domElement;\r\n            camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n          }\r\n      \r\n          objects.forEach((obj) => {\r\n            obj.rotation.y = time;\r\n          });\r\n      \r\n          renderer.render(scene, camera);\r\n      \r\n          requestAnimationFrame(render);\r\n        }\r\n      \r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport './Flame.css';\r\nimport {GUI} from \"dat.gui\"\r\nimport { FlyControls } from '../../../../node_modules/three/examples/jsm/controls/FlyControls.js';\r\nimport { Lensflare, LensflareElement } from '../../../../node_modules/three/examples/jsm/objects/Lensflare.js';\r\n\r\nexport default class Flame extends React.Component{\r\n    /**\r\n     * @ props.title\r\n     * @ props.picture\r\n     * @ props.description\r\n     * \r\n     * return a react component of game card IN 3D\r\n     */\r\n\r\n    //rr = React.createRef();\r\n    render() {\r\n        return(\r\n            // <div ref={this.rr} />\r\n            <canvas id = \"Flame-c\" ref={ref => (this.mount = ref)} />\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // hook the renderer to the canvas\r\n        const canvas = this.mount\r\n        const renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n          canvas: canvas});\r\n          renderer.outputEncoding = THREE.sRGBEncoding;\r\n            \r\n\r\n        const clock = new THREE.Clock();\r\n        \r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color().setHSL( 0.51, 0.4, 0.01 );\r\n        scene.fog = new THREE.Fog( scene.background, 3500, 15000 );\r\n\r\n        var camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 15000 );\r\n        camera.position.set(0, 0, 250);\r\n        camera.up.set(0, 0, 1);\r\n        camera.lookAt(0, 0, 0);\r\n\r\n        // world\r\n\r\n        const s = 250;\r\n\r\n        // an array of objects who's rotation to update\r\n        const objects = [];\r\n\r\n        const solarSystem = new THREE.Object3D();\r\n        scene.add(solarSystem);\r\n        objects.push(solarSystem);\r\n      \r\n        // lensflares\r\n\t\t\t\tconst textureLoader = new THREE.TextureLoader();\r\n\r\n\t\t\t\tconst textureFlare0 = textureLoader.load( 'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/lensflare/lensflare0.png' );\r\n\t\t\t\tconst textureFlare3 = textureLoader.load( 'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/lensflare/lensflare3.png' );\r\n\r\n\t\t\t\taddLight( 0.55, 0.9, 0.5, 5000, 0, - 1000 );\r\n\t\t\t\t// addLight( 0.08, 0.8, 0.5, 0, 0, - 1000 );\r\n\t\t\t\t// addLight( 0.995, 0.5, 0.9, 5000, 5000, - 1000 );\r\n\r\n\t\t\t\tfunction addLight( h, s, l, x, y, z ) {\r\n\r\n\t\t\t\t\tconst light = new THREE.PointLight( 0xffffff, 1.5, 2000 );\r\n\t\t\t\t\tlight.color.setHSL( h, s, l );\r\n\t\t\t\t\t// light.position.set( x, y, z );\r\n\t\t\t\t\tsolarSystem.add( light );\r\n\r\n\t\t\t\t\tconst lensflare = new Lensflare();\r\n          console.log(\"ccc\", lensflare)\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n\t\t\t\t\tlensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n\t\t\t\t\tlight.add( lensflare );\r\n\r\n\t\t\t\t}\r\n\r\n        const butterflyPivot = new THREE.Object3D();\r\n        scene.add(butterflyPivot);\r\n        const sphereGeometry = new THREE.SphereGeometry(\r\n          10, 3, 3);\r\n        const sunMaterial = new THREE.MeshPhongMaterial({emissive: 0xFFFF00});\r\n        const sunMesh = new THREE.Mesh(sphereGeometry, sunMaterial);\r\n        butterflyPivot.add(sunMesh);\r\n\r\n \r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n      \r\n      \r\n        const targetPosition = new THREE.Vector3();\r\n        function render() {\r\n      \r\n          if (resizeRendererToDisplaySize(renderer)) {\r\n            const canvas = renderer.domElement;\r\n            camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n          }\r\n\r\n          solarSystem.getWorldPosition(targetPosition);\r\n          butterflyPivot.lookAt(targetPosition);\r\n\r\n          // go to the target position\r\n          butterflyPivot.position.x += (solarSystem.position.x - butterflyPivot.position.x) / 60\r\n          butterflyPivot.position.y += (solarSystem.position.y - butterflyPivot.position.y) / 60\r\n          // butterflyPivot.position.z += (solarSystem.position.z - butterflyPivot.position.z) / 60\r\n\r\n          renderer.render(scene, camera);\r\n      \r\n          requestAnimationFrame(render);\r\n        }\r\n        \r\n        var mouse = {x: 0, y: 0};\r\n        canvas.addEventListener('mousemove', function (event) {\r\n          event.preventDefault();\r\n          // console.log(event.clientX, event.clientY)\r\n          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n          mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n          \r\n          // Make the sphere follow the mouse\r\n            var vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n            vector.unproject( camera );\r\n            var dir = vector.sub( camera.position ).normalize();\r\n            var distance = - camera.position.z / dir.z;\r\n            var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n            solarSystem.position.copy(pos);\r\n        });\r\n\r\n        \r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Solarsystem from './assets/threed/solarsystem/Solarsystem';\nimport Flame from './assets/threed/flame/Flame';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <StringAnimation strings = {[\"yoloswag4jesus\",\"I am Sexy\", \"and I know it\"]}/> */}\n    {/* <LandingScene /> */}\n    <Flame/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}